name: Create Package
run-name: ${{github.actor}} is building the ${{ inputs.COMPONENT }} Zarf Package
on:
  workflow_call:
    inputs:
      REF_NAME:
        required: true
        type: string
      REF_TYPE:
        required: true
        type: string
      ZARF_PACKAGE:
        required: true
        type: string
      COMPONENT:
        required: true
        type: string
      IMAGE_TAG:
        required: false
        type: string
permissions:
  id-token: write
  contents: read
  packages: write
defaults:
  run:
    shell: bash
env:
  # S3_PATH: "s3://${{ secrets.AWS_BUCKET }}/naps-dev/${{ inputs.COMPONENT }}/${{ inputs.REF_NAME }}"
  # OCI_PATH: "oci://765814079306.dkr.ecr.us-east-1.amazonaws.com"
  REGISTRY: ghcr.io
  ZARF_PACKAGE: "${{ inputs.ZARF_PACKAGE }}"
  COMPONENT: "${{ inputs.COMPONENT }}"
  REF_NAME: "${{ inputs.REF_NAME }}"
  DCO_REF_NAME: "${{ github.head_ref || github.ref_name }}"
  DCO_REF_TYPE: "${{ github.ref_type }}"
jobs:
  package-component:
    runs-on: [self-hosted, onprem]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Zarf
        uses: defenseunicorns/setup-zarf@main
        with:
          version: v0.26.4
          download-init-package: true

      # - name: Configure AWS ECR Credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: ${{secrets.AWS_ECR_ROLE}}
      #     role-session-name: arkime-ecr
      #     aws-region: us-east-1

      # - name: ECR Login
      #   uses: aws-actions/amazon-ecr-login@v1
      #   id: login-ecr

      - name: GHCR Login
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Registry One
        run: |
          zarf tools registry login \
            -u "${{secrets.REGISTRY1_USERNAME}}" \
            -p "${{secrets.REGISTRY1_PASSWORD}}" \
            "registry1.dso.mil"

      - name: Create Zarf Package from Branch
        if: ${{ inputs.REF_TYPE == 'branch'}}
        run: |
          # cleanup and init a tmp dir
          rm -rf big-tmp
          mkdir big-tmp

          args=()
          args+=(--set GIT_REF=refs/heads/${{ inputs.REF_NAME }})
          args+=(--set VERSION=${{ inputs.REF_NAME }})
          if [[ -z "${IMAGE_TAG}" ]]; then
            args+=(--set IMAGE_TAG="${{ inputs.IMAGE_TAG }}")
          fi
          args+=(--confirm)
          args+=(--tmpdir $PWD/big-tmp)
          args+=(--skip-sbom)

          # build the zarf package
          zarf package create "${args[@]}"

          # cleanup tmp dir
          rm -rf ./big-tmp
        working-directory: ${{ inputs.COMPONENT }}

      - name: Create Zarf Package from Tag
        if: ${{ inputs.REF_TYPE == 'tag'}}
        run: |
          # cleanup and init a tmp dir
          rm -rf big-tmp
          mkdir big-tmp

          args=()
          args+=(--set GIT_REF=refs/tags/${{ inputs.REF_NAME }})
          args+=(--set VERSION=${{ inputs.REF_NAME }})
          if [[ -z "${IMAGE_TAG}" ]]; then
            args+=(--set IMAGE_TAG="${{ inputs.IMAGE_TAG }}")
          fi
          args+=(--confirm)
          args+=(--tmpdir $PWD/big-tmp)
          args+=(--skip-sbom)

          # build the zarf package
          zarf package create "${args[@]}"

          # cleanup tmp dir
          rm -rf ./big-tmp
        working-directory: ${{ inputs.COMPONENT }}

      - name: Configure AWS S3 Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{secrets.AWS_ROLE}}
          role-session-name: arkime-s3
          aws-region: us-east-1

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.19.5'
          cache: true

      - name: Create DCO package (from Branch) needed for testing individual component
        if: ${{ env.DCO_REF_TYPE == 'branch' && inputs.COMPONENT != 'dco-core' }}
        run: |
          # cleanup and init a tmp dir
          rm -rf big-tmp
          mkdir big-tmp

          # build the zarf package
          zarf package create \
            --set GIT_REF=refs/heads/${{ env.DCO_REF_NAME }} \
            --set VERSION=${{ env.DCO_REF_NAME }}
            --confirm \
            --tmpdir $PWD/big-tmp \
            --skip-sbom

          # cleanup tmp dir
          rm -rf ./big-tmp
        working-directory: dco-core

      - name: Create DCO package (from Tag) needed for testing individual component
        if: ${{ env.DCO_REF_TYPE == 'tag' && inputs.COMPONENT != 'dco-core' }}
        run: |
          # cleanup and init a tmp dir
          rm -rf big-tmp
          mkdir big-tmp

          # build the zarf package
          zarf package create \
            --set GIT_REF=refs/tags/${{ env.DCO_REF_NAME }} \
            --set VERSION=${{ env.DCO_REF_NAME }}
            --confirm \
            --tmpdir $PWD/big-tmp \
            --skip-sbom

          # cleanup tmp dir
          rm -rf ./big-tmp
        working-directory: dco-core

      - name: Install dependencies for terratest
        run: |
          go get -t ./...

      - name: Run go test
        working-directory: ./test/
        run: |
          go test -timeout 45m

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/87975021?s=200&v=4
          SLACK_USERNAME: GitHub
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      # - name: Save Package to S3
      #   run: |
      #     aws s3 cp --no-progress "${{ env.ZARF_PACKAGE }}" "${{ env.S3_PATH }}/${{ env.ZARF_PACKAGE }}"
      #   working-directory: ${{ inputs.COMPONENT }}

      - name: Save Package to OCI Repo
        if: ${{ inputs.COMPONENT == 'dco-core' }}
        run: |
          zarf package publish "${{ env.ZARF_PACKAGE }}" "${{ env.OCI_PATH }}"
        working-directory: dco-core
